--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -640,6 +640,7 @@ struct sk_buff {
 	__u8			csum_complete_sw:1;
 	__u8			csum_level:2;
 	__u8			csum_bad:1;
+
 #ifdef CONFIG_IPV6_NDISC_NODETYPE
 	__u8			ndisc_nodetype:2;
 #endif
@@ -648,7 +649,8 @@ struct sk_buff {
 	__u8			inner_protocol_type:1;
 	__u8			remcsum_offload:1;
 	__u8			gro_skip:1;
-	/* 2 or 4 bit hole */
+	__u8            fast_forwarded:1;
+	/* 1 or 3 bit hole */
 
 #ifdef CONFIG_NET_SCHED
 	__u16			tc_index;	/* traffic control index */
--- a/net/core/dev.c
+++ b/net/core/dev.c
@@ -2773,8 +2773,13 @@ static int xmit_one(struct sk_buff *skb,
 	unsigned int len;
 	int rc;
 
-	if (!list_empty(&ptype_all) || !list_empty(&dev->ptype_all))
-		dev_queue_xmit_nit(skb, dev);
+    /* If this skb has been fast forwarded then we don't want it to
+     * go to any taps (by definition we're trying to bypass them).
+     */
+    if (unlikely(!skb->fast_forwarded)) {
+        if (!list_empty(&ptype_all) || !list_empty(&dev->ptype_all))
+            dev_queue_xmit_nit(skb, dev);
+    }
 
 	len = skb->len;
 	trace_net_dev_start_xmit(skb, dev);
@@ -3867,6 +3872,9 @@ void netdev_rx_handler_unregister(struct
 }
 EXPORT_SYMBOL_GPL(netdev_rx_handler_unregister);
 
+int (*athrs_fast_nat_recv)(struct sk_buff *skb) __rcu __read_mostly;
+EXPORT_SYMBOL_GPL(athrs_fast_nat_recv);
+
 /*
  * Limit the use of PFMEMALLOC reserves to those protocols that implement
  * the special handling of PFMEMALLOC skbs.
@@ -3909,6 +3917,7 @@ static int __netif_receive_skb_core(stru
 	bool deliver_exact = false;
 	int ret = NET_RX_DROP;
 	__be16 type;
+	int (*fast_recv)(struct sk_buff *skb);
 
 	net_timestamp_check(!netdev_tstamp_prequeue, skb);
 
@@ -3935,6 +3944,14 @@ another_round:
 			goto out;
 	}
 
+    fast_recv = rcu_dereference(athrs_fast_nat_recv);
+    if (fast_recv) {
+        if (fast_recv(skb)) {
+            ret = NET_RX_SUCCESS;
+            goto out;
+        }
+    }
+
 #ifdef CONFIG_NET_CLS_ACT
 	if (skb->tc_verd & TC_NCLS) {
 		skb->tc_verd = CLR_TC_NCLS(skb->tc_verd);
