From 40c2cffc11a3929207ee577c1c6952bfbb40e1c9 Mon Sep 17 00:00:00 2001
From: Landen Chao <landen.chao@mediatek.com>
Date: Tue, 08 Dec 2020 17:29:53 +0800
Subject: [PATCH] eth: mediatek: fix sgmii an mode

Fix SGMII AN/Force mode programming sequence to latest one.

Test: Test pass by mt7622 EVB with Intel 2.5G PHY SFP

Change-Id: Iafd1ee76b52961194cfa2c8c4f2237ae33ec5184
CR-Id: WCNCR00181147
Signed-off-by: Landen Chao <landen.chao@mediatek.com>
---

diff --git a/drivers/net/ethernet/mediatek/mtk_eth_soc.h b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
index 5c30a52..1547e45 100644
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -416,8 +416,12 @@
 /* SGMII subsystem config registers */
 /* Register to auto-negotiation restart */
 #define SGMSYS_PCS_CONTROL_1	0x0
+#define SGMII_AN_ENABLE		BIT(12)
 #define SGMII_AN_RESTART	BIT(9)
 
+#define SGMSYS_PCS_SPEED_ABILITY	0x8
+#define SGMII_TX_CONFIG		BIT(0)
+
 /* Register to programmable link timer, the unit in 2 * 8ns */
 #define SGMSYS_PCS_LINK_TIMER	0x18
 #define SGMII_LINK_TIMER_DEFAULT	(0x186a0 & GENMASK(19, 0))
@@ -425,10 +429,12 @@
 /* Register to control remote fault */
 #define SGMSYS_SGMII_MODE	0x20
 #define SGMII_REMOTE_FAULT_DIS	BIT(8)
+#define SGMII_SPEED_DUPLEX_AN	BIT(1)
 
 /* Register to power up QPHY */
 #define SGMSYS_QPHY_PWR_STATE_CTRL 0xe8
 #define	SGMII_PHYA_PWD		BIT(4)
+#define	SGMII_PHYA_DOWN_IDLE	GENMASK(4, 0)
 
 /* Infrasys subsystem config registers */
 #define INFRA_MISC2		0x70c
diff --git a/drivers/net/ethernet/mediatek/mtk_sgmii.c b/drivers/net/ethernet/mediatek/mtk_sgmii.c
index 26d1573..1823e4b 100644
--- a/drivers/net/ethernet/mediatek/mtk_sgmii.c
+++ b/drivers/net/ethernet/mediatek/mtk_sgmii.c
@@ -63,20 +63,29 @@
 	if (!ss->regmap[id])
 		return -EINVAL;
 
+	/* Setup SGMII 1G speed */
+	regmap_read(ss->regmap[id], ss->ana_rgc3, &val);
+	val &= ~GENMASK(3, 2);
+	regmap_write(ss->regmap[id], ss->ana_rgc3, val);
+
 	/* Setup the link timer and QPHY power up inside SGMIISYS */
 	regmap_write(ss->regmap[id], SGMSYS_PCS_LINK_TIMER,
 		     SGMII_LINK_TIMER_DEFAULT);
 
 	regmap_read(ss->regmap[id], SGMSYS_SGMII_MODE, &val);
-	val |= SGMII_REMOTE_FAULT_DIS;
+	val |= SGMII_REMOTE_FAULT_DIS | SGMII_SPEED_DUPLEX_AN;
 	regmap_write(ss->regmap[id], SGMSYS_SGMII_MODE, val);
 
+	/* Setup sgmii configure word */
+	regmap_write(ss->regmap[id], SGMSYS_PCS_SPEED_ABILITY,
+		     SGMII_TX_CONFIG);
+
 	regmap_read(ss->regmap[id], SGMSYS_PCS_CONTROL_1, &val);
-	val |= SGMII_AN_RESTART;
+	val |= SGMII_AN_ENABLE | SGMII_AN_RESTART;
 	regmap_write(ss->regmap[id], SGMSYS_PCS_CONTROL_1, val);
 
 	regmap_read(ss->regmap[id], SGMSYS_QPHY_PWR_STATE_CTRL, &val);
-	val &= ~SGMII_PHYA_PWD;
+	val &= ~SGMII_PHYA_DOWN_IDLE;
 	regmap_write(ss->regmap[id], SGMSYS_QPHY_PWR_STATE_CTRL, val);
 
 	return 0;
@@ -98,7 +107,7 @@
 
 	/* disable SGMII AN */
 	regmap_read(ss->regmap[id], SGMSYS_PCS_CONTROL_1, &val);
-	val &= ~BIT(12);
+	val &= ~SGMII_AN_ENABLE;
 	regmap_write(ss->regmap[id], SGMSYS_PCS_CONTROL_1, val);
 
 	/* SGMII force mode setting */
@@ -107,7 +116,7 @@
 
 	/* Release PHYA power down state */
 	regmap_read(ss->regmap[id], SGMSYS_QPHY_PWR_STATE_CTRL, &val);
-	val &= ~SGMII_PHYA_PWD;
+	val &= ~SGMII_PHYA_DOWN_IDLE;
 	regmap_write(ss->regmap[id], SGMSYS_QPHY_PWR_STATE_CTRL, val);
 
 	return 0;
