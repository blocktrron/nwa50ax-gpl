Index: linux-4.4.198/drivers/mtd/mtdoops.c
===================================================================
--- linux-4.4.198.orig/drivers/mtd/mtdoops.c
+++ linux-4.4.198/drivers/mtd/mtdoops.c
@@ -32,24 +32,37 @@
 #include <linux/interrupt.h>
 #include <linux/mtd/mtd.h>
 #include <linux/kmsg_dump.h>
+#include <linux/utsname.h>
+#include <generated/compile.h>
 
 /* Maximum MTD partition size */
 #define MTDOOPS_MAX_MTD_SIZE (8 * 1024 * 1024)
 
 #define MTDOOPS_KERNMSG_MAGIC 0x5d005d00
-#define MTDOOPS_HEADER_SIZE   8
 
-static unsigned long record_size = 4096;
+/* mtdoops header size */
+#define COUNTER_SIZE    4
+#define MAGIC_SIZE      4
+#define TIMESTAMP_SIZE  4
+#define KERNEL_VER_SIZE 256
+#define MTDOOPS_HEADER_SIZE (COUNTER_SIZE + MAGIC_SIZE + TIMESTAMP_SIZE + KERNEL_VER_SIZE)
+
+/* mttdoops parameters*/
+#define RECORD_SIZE 126976 /* The maximum record size should be equal to mtd erase size and must be a multiple of 4096 */
+#define MTDDEV "disklog"
+#define DUMP_OOPS 0
+
+static unsigned long record_size = RECORD_SIZE;
 module_param(record_size, ulong, 0400);
 MODULE_PARM_DESC(record_size,
 		"record size for MTD OOPS pages in bytes (default 4096)");
 
-static char mtddev[80];
+static char mtddev[80] = MTDDEV;
 module_param_string(mtddev, mtddev, 80, 0400);
 MODULE_PARM_DESC(mtddev,
 		"name or index number of the MTD device to use");
 
-static int dump_oops = 1;
+static int dump_oops = DUMP_OOPS;
 module_param(dump_oops, int, 0600);
 MODULE_PARM_DESC(dump_oops,
 		"set to 1 to dump oopses, 0 to only dump panics (default 1)");
@@ -207,17 +220,35 @@ badblock:
 	goto badblock;
 }
 
+static time_t get_current_time(void)
+{
+	struct timeval now;
+
+	do_gettimeofday(&now);
+	return now.tv_sec;
+}
+
 static void mtdoops_write(struct mtdoops_context *cxt, int panic)
 {
 	struct mtd_info *mtd = cxt->mtd;
 	size_t retlen;
 	u32 *hdr;
+	char *ver;
+	char kernel_ver[KERNEL_VER_SIZE];
 	int ret;
 
+	sprintf(kernel_ver, "%s version %s"
+			" (" LINUX_COMPILE_BY "@" LINUX_COMPILE_HOST ")"
+			" (" LINUX_COMPILER ") %s\0"
+			, utsname()->sysname, utsname()->release, utsname()->version);
+
 	/* Add mtdoops header to the buffer */
 	hdr = cxt->oops_buf;
 	hdr[0] = cxt->nextcount;
 	hdr[1] = MTDOOPS_KERNMSG_MAGIC;
+	hdr[2] = get_current_time();
+	ver = (char *) (cxt->oops_buf + sizeof(u32)*3);
+	strcpy(ver, kernel_ver);
 
 	if (panic) {
 		ret = mtd_panic_write(mtd, cxt->nextpage * record_size,
@@ -251,7 +282,7 @@ static void find_next_position(struct mt
 {
 	struct mtd_info *mtd = cxt->mtd;
 	int ret, page, maxpos = 0;
-	u32 count[2], maxcount = 0xffffffff;
+	u32 count[MTDOOPS_HEADER_SIZE/4], maxcount = 0xffffffff;
 	size_t retlen;
 
 	for (page = 0; page < cxt->oops_pages; page++) {
@@ -333,6 +364,12 @@ static void mtdoops_notify_add(struct mt
 	if (mtd->index != cxt->mtd_index || cxt->mtd_index < 0)
 		return;
 
+	err = __get_mtd_device(mtd);
+	if (err) {
+		printk(KERN_ERR "mtdoops: get mtd device failed, error %d\n", err);
+		return;
+	}
+
 	if (mtd->size < mtd->erasesize * 2) {
 		printk(KERN_ERR "mtdoops: MTD partition %d not big enough for mtdoops\n",
 		       mtd->index);
Index: linux-4.4.198/drivers/mtd/ubi/gluebi.c
===================================================================
--- linux-4.4.198.orig/drivers/mtd/ubi/gluebi.c
+++ linux-4.4.198/drivers/mtd/ubi/gluebi.c
@@ -323,6 +323,7 @@ static int gluebi_create(struct ubi_devi
 	mtd->erasesize  = vi->usable_leb_size;
 	mtd->_read       = gluebi_read;
 	mtd->_write      = gluebi_write;
+	mtd->_panic_write = gluebi_write;
 	mtd->_erase      = gluebi_erase;
 	mtd->_get_device = gluebi_get_device;
 	mtd->_put_device = gluebi_put_device;
Index: linux-4.4.198/drivers/mtd/nand/mtk_nand_mt7621.c
===================================================================
--- linux-4.4.198.orig/drivers/mtd/nand/mtk_nand_mt7621.c
+++ linux-4.4.198/drivers/mtd/nand/mtk_nand_mt7621.c
@@ -1356,6 +1356,7 @@ static int mtk_nfc_nand_chip_init(struct
 	mtd->owner = THIS_MODULE;
 	mtd->dev.parent = dev;
 	mtd->name = MTK_NAME;
+	mtd->priv = nand;
 	mtd_set_ooblayout(mtd, &mtk_nfc_ooblayout_ops);
 
 	mtk_nfc_hw_init(nfc);
Index: linux-4.4.198/drivers/mtd/ubi/io.c
===================================================================
--- linux-4.4.198.orig/drivers/mtd/ubi/io.c
+++ linux-4.4.198/drivers/mtd/ubi/io.c
@@ -281,7 +281,11 @@ int ubi_io_write(struct ubi_device *ubi,
 	}
 
 	addr = (loff_t)pnum * ubi->peb_size + offset;
-	err = mtd_write(ubi->mtd, addr, len, &written, buf);
+
+	if (in_interrupt() || oops_in_progress)
+		err = mtd_panic_write(ubi->mtd, addr, len, &written, buf);
+	else
+		err = mtd_write(ubi->mtd, addr, len, &written, buf);
 	if (err) {
 		ubi_err(ubi, "error %d while writing %d bytes to PEB %d:%d, written %zd bytes",
 			err, len, pnum, offset, written);
