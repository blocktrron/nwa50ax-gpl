From 40ebfad1117abe92f942e1ea5ed5be461f8f0127 Mon Sep 17 00:00:00 2001
From: Weijie Gao <weijie.gao@mediatek.com>
Date: Wed, 24 Jun 2020 21:34:58 +0800
Subject: [PATCH] nand: mt762-nand: fix jffs2 compat issue in mt7621 NAND
 driver

This issue happens when an erased page contains bitflips.
Previously this compatible routine ignores ECC error, and only treats full
0xff page as empty page. So the page with bitflips will be treated as page
containing valid data. When doing data merging, the flip bits will be ANDed
into the new data, and caused data corruption.

This patch does the following changes:
1. Introduce a new function to check if a page is empty, by accept bitflips
   that the ecc engine to correct.
2. Check emtpy page by reading the page in raw mode.
3. Since JFFS2 only writes oob into the first page of a block, this patch
   will only do compatible routine for the first page of a block.
4. Discard data merging using AND operation. This patch only keeps
   new data + old oob, or old data + new oob.
5. Use ecc mode to read pages within a block to be reserved first. If ecc
   error occured, change to raw mode to prevent further bitflips.
6. Add more error output for further debugging.

Test: OK

Change-Id: I4c3529070295342636d719436cc40850fd5437fd
Signed-off-by: Weijie Gao <weijie.gao@mediatek.com>
CR-Id: WCNCR00175507
---
 drivers/mtd/nand/mtk_nand_mt7621.c | 341 ++++++++++++++++++++++-------
 drivers/mtd/nand/mtk_nand_mt7621.h |   8 +-
 2 files changed, 267 insertions(+), 82 deletions(-)

diff --git a/drivers/mtd/nand/mtk_nand_mt7621.c b/drivers/mtd/nand/mtk_nand_mt7621.c
index 0e2e33bb8..eb47d095f 100644
--- a/drivers/mtd/nand/mtk_nand_mt7621.c
+++ b/drivers/mtd/nand/mtk_nand_mt7621.c
@@ -23,8 +23,12 @@
 
 #define MTK_NAME		"mtk-nand"
 
-static int mtk_nfc_do_read_page_hwecc(struct mtd_info *mtd,
-	struct nand_chip *chip, uint8_t *buf, int page);
+static bool mtk_nfc_check_empty_page_ecc(struct mtd_info *mtd,
+					 struct nand_chip *chip,
+					 const uint8_t *buf);
+
+static int mtk_nfc_do_read_page(struct mtd_info *mtd, struct nand_chip *chip,
+				uint8_t *buf, int page, int ecc_on);
 
 static int mtk_nfc_page_erase_write(struct mtd_info *mtd,
 	struct nand_chip *chip, const uint8_t *buf, const uint8_t *oob,
@@ -564,55 +568,75 @@ static int mtk_nfc_write_oob_raw(struct mtd_info *mtd, struct nand_chip *chip,
 	return ret & NAND_STATUS_FAIL ? -EIO : 0;
 }
 
-static int mtk_nfc_write_oob_compat_check(struct mtd_info *mtd,
+static int mtk_nfc_write_oob_jffs2_fixup(struct mtd_info *mtd,
 	struct nand_chip *chip, int page)
 {
 	struct mtk_nfc *nfc = nand_get_controller_data(chip);
-	int i, j, oobsame = 1;
-	u8 *oob_poi, *oob_flash;
+	struct device *dev = nfc->dev;
+	int ret, pages_per_block;
+	bool empty_page = false;
+
+	/*
+	 * only do this for first page of a block
+	 * (i.e. the page with JFFS2 clean marker)
+	 */
+	pages_per_block = mtd->erasesize / mtd->writesize;
+	if (page % pages_per_block)
+		return 0;
 
 	/* backup pending oob data */
 	memcpy(nfc->pending_oob[0], chip->oob_poi, mtd->oobsize);
 
-	mtk_nfc_do_read_page_hwecc(mtd, chip, nfc->pending_page, page);
+	/* read target page in raw mode first to check whether it's empty */
+	ret = mtk_nfc_do_read_page(mtd, chip, nfc->pending_page, page, 0);
+	if (ret) {
+		/* read failure. reject follow-up actions */
+		dev_err(dev, "raw read error %d on page [%u] for jffs2 fixup\n",
+			ret, page);
 
-	if (mtk_nfc_check_empty_page(mtd, chip, nfc->pending_page)) {
-		/* page is empty, writing directly */
+		/* restore pending oob data */
 		memcpy(chip->oob_poi, nfc->pending_oob[0], mtd->oobsize);
-		return 0;
-	}
-
-	for (i = 0; i < chip->ecc.steps; i++) {
-		oob_poi = oob_ptr(chip, i);
-		oob_flash = oob_buf_ptr(chip, nfc->pending_oob[0], i);
-		for (j = 0; j < nfc->caps->fdm_ecc_size; j++) {
-			if (oob_poi[j] != oob_flash[i]) {
-				oobsame = 0;
-				break;
-			}
-		}
+		return ret;
 	}
 
-	if (oobsame) {
-		/* both oob are the same, doing nothing */
+	/* page must be checked in raw mode (with ecc parity code region) */
+	empty_page = mtk_nfc_check_empty_page_ecc(mtd, chip, nfc->pending_page);
+	if (empty_page) {
+		/* page is empty. do normal writing */
 		memcpy(chip->oob_poi, nfc->pending_oob[0], mtd->oobsize);
-		return 1;
+		return 0;
 	}
 
-	/* backup nand oob data */
-	memcpy(nfc->pending_oob[1], chip->oob_poi, mtd->oobsize);
+	/* read target page in ecc mode */
+	ret = mtk_nfc_do_read_page(mtd, chip, nfc->pending_page, page, 1);
+	if (ret < 0) {
+		if (ret != -EBADMSG) {
+			/* read failure. reject follow-up actions */
+			dev_err(dev,
+				"read error %d on page [%u] for jffs2 fixup\n",
+				ret, page);
+
+			memcpy(chip->oob_poi, nfc->pending_oob[0],
+			       mtd->oobsize);
+			return ret;
+		}
 
-	/* merge oob data */
-	for (i = 0; i < mtd->oobsize; i++)
-		nfc->pending_oob[1][i] &= nfc->pending_oob[0][i];
+		/*
+		 * page has unrecoverable ecc error. we can choose to reject
+		 * follow-up actions here.
+		 */
+		dev_warn(dev, "doing page merging on %u with bitflips "
+			 "for jffs2 fixup\n", page);
+	}
 
-	mtk_nfc_page_erase_write(mtd, chip, nfc->pending_page,
-		nfc->pending_oob[1], page);
+	/* write page with old data and new oob */
+	ret = mtk_nfc_page_erase_write(mtd, chip, nfc->pending_page,
+				       nfc->pending_oob[0], page);
 
 	/* restore original oob data */
 	memcpy(chip->oob_poi, nfc->pending_oob[0], mtd->oobsize);
 
-	return 1;
+	return !ret ? 1 : ret;
 }
 
 static int mtk_nfc_write_oob_std(struct mtd_info *mtd, struct nand_chip *chip,
@@ -621,8 +645,9 @@ static int mtk_nfc_write_oob_std(struct mtd_info *mtd, struct nand_chip *chip,
 	struct mtk_nfc *nfc = nand_get_controller_data(chip);
 	int ret;
 
-	if (mtk_nfc_write_oob_compat_check(mtd, chip, page))
-		return 0;
+	ret = mtk_nfc_write_oob_jffs2_fixup(mtd, chip, page);
+	if (ret)
+		return ret > 0 ? 0 : ret;
 
 	memset(nfc->buffer, 0xff, mtd->writesize + mtd->oobsize);
 
@@ -859,15 +884,74 @@ static int mtk_nfc_block_markbad(struct mtd_info *mtd, loff_t ofs)
 	return ret;
 }
 
-static int mtk_nfc_do_write_page_hwecc(struct mtd_info *mtd,
-	struct nand_chip *chip, const uint8_t *buf, int page)
+/*******************************************************************************
+ * The following functions are used to solve JFFS2 incompatible issue.
+ ******************************************************************************/
+
+static const uint8_t zero_bits[] = {
+	8, 7, 7, 6, 7, 6, 6, 5, 7, 6, 6, 5, 6, 5, 5, 4,
+	7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3,
+	7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3,
+	6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2,
+	7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3,
+	6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2,
+	6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2,
+	5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1,
+	7, 6, 6, 5, 6, 5, 5, 4, 6, 5, 5, 4, 5, 4, 4, 3,
+	6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2,
+	6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2,
+	5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1,
+	6, 5, 5, 4, 5, 4, 4, 3, 5, 4, 4, 3, 4, 3, 3, 2,
+	5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1,
+	5, 4, 4, 3, 4, 3, 3, 2, 4, 3, 3, 2, 3, 2, 2, 1,
+	4, 3, 3, 2, 3, 2, 2, 1, 3, 2, 2, 1, 2, 1, 1, 0,
+};
+
+static uint32_t count_page_zeros(const uint8_t *buf, uint32_t len)
+{
+	uint32_t i, c = 0;
+
+	for (i = 0; i < len; i++)
+		c += zero_bits[buf[i]];
+
+	return c;
+}
+
+static bool mtk_nfc_check_empty_page_ecc(struct mtd_info *mtd,
+					 struct nand_chip *chip,
+					 const uint8_t *buf)
+{
+	struct mtk_nfc *nfc = nand_get_controller_data(chip);
+	u8 ecc_parity_size;
+	int i, c;
+
+	/* calculate ecc paroty code size */
+	ecc_parity_size = (chip->ecc.strength * 13 + 7) >> 3;
+
+	for (i = 0; i < chip->ecc.steps; i++) {
+		c = count_page_zeros(buf + i * nfc->caps->sector_size,
+				     nfc->caps->sector_size);
+		c += count_page_zeros(oob_ptr(chip, i), nfc->caps->fdm_size);
+		c += count_page_zeros(ecc_ptr(chip, i), ecc_parity_size);
+
+		if (c > chip->ecc.strength)
+			return false;
+	}
+
+	return true;
+}
+
+static int mtk_nfc_do_write_page(struct mtd_info *mtd, struct nand_chip *chip,
+				 const uint8_t *buf, int page, int ecc_on)
 {
 	int status;
 
 	chip->cmdfunc(mtd, NAND_CMD_SEQIN, 0x00, page);
 
-	status = mtk_nfc_write_page_hwecc(mtd, chip, buf, 1,
-		page);
+	if (ecc_on)
+		status = mtk_nfc_write_page_hwecc(mtd, chip, buf, 1, page);
+	else
+		status = mtk_nfc_write_page_raw(mtd, chip, buf, 1, page);
 
 	if (status < 0)
 		return status;
@@ -881,33 +965,37 @@ static int mtk_nfc_do_write_page_hwecc(struct mtd_info *mtd,
 	return 0;
 }
 
-static int mtk_nfc_do_read_page_hwecc(struct mtd_info *mtd,
-	struct nand_chip *chip, uint8_t *buf, int page)
+static int mtk_nfc_do_read_page(struct mtd_info *mtd, struct nand_chip *chip,
+				uint8_t *buf, int page, int ecc_on)
 {
-	unsigned int ecc_failures = mtd->ecc_stats.failed;
 	int status;
 
 	chip->cmdfunc(mtd, NAND_CMD_READ0, 0x00, page);
 
-	status = mtk_nfc_read_page_hwecc(mtd, chip, buf, 1,
-		page);
+	if (ecc_on)
+		status = mtk_nfc_read_page_hwecc(mtd, chip, buf, 1, page);
+	else
+		status = mtk_nfc_read_page_raw(mtd, chip, buf, 1, page);
 
 	if (status < 0)
 		return status;
 
-	if (mtd->ecc_stats.failed - ecc_failures)
-		return -EBADMSG;
-
 	return 0;
 }
 
 static int mtk_nfc_do_erase(struct mtd_info *mtd, struct nand_chip *chip,
 	int page)
 {
+	int status;
+
 	chip->cmdfunc(mtd, NAND_CMD_ERASE1, -1, page);
 	chip->cmdfunc(mtd, NAND_CMD_ERASE2, -1, -1);
 
-	return chip->waitfunc(mtd, chip);
+	status = chip->waitfunc(mtd, chip);
+	if (status & NAND_STATUS_FAIL)
+		return -EIO;
+
+	return 0;
 }
 
 static int mtk_nfc_page_erase_write(struct mtd_info *mtd,
@@ -916,78 +1004,168 @@ static int mtk_nfc_page_erase_write(struct mtd_info *mtd,
 {
 	struct mtk_nfc *nfc = nand_get_controller_data(chip);
 	int pages_per_block, page_start;
-	int i;
+	struct device *dev = nfc->dev;
+	int i, ret;
 
 	pages_per_block = mtd->erasesize / mtd->writesize;
 	page_start = page - page % pages_per_block;
 
 	/* read all pages within this block except the one to be rewritten */
 	for (i = 0; i < pages_per_block; i++) {
-		if (page_start + i != page) {
-			mtk_nfc_do_read_page_hwecc(mtd, chip,
-				nfc->block_buffer[i], page_start + i);
-			memcpy(nfc->block_buffer[i] + mtd->writesize,
-				chip->oob_poi,
-				nfc->caps->fdm_size * chip->ecc.steps);
+		if (page_start + i == page)
+			continue;
+
+		ret = mtk_nfc_do_read_page(mtd, chip, nfc->block_buffer[i].buf,
+					   page_start + i, 1);
+		if (!ret) {
+			/* no error, or ecc corrected */
+			nfc->block_buffer[i].ecc_on = 1;
+		} else if (ret == -EBADMSG) {
+			/* unrecoverable ecc error. switch to raw read */
+			ret = mtk_nfc_do_read_page(mtd, chip,
+						   nfc->block_buffer[i].buf,
+						   page_start + i, 0);
+			if (ret) {
+				/* I/O error. print error */
+				dev_err(dev,
+					"raw read error %d on page %u for "
+					"jffs2 fixup\n", ret, page);
+				nfc->block_buffer[i].ecc_on = -1;
+			}
+			nfc->block_buffer[i].ecc_on = 0;
+		} else {
+			/* I/O error. print error */
+			dev_err(dev,
+				"read error %d on page %u for jffs2 fixup\n",
+				ret, page);
+			nfc->block_buffer[i].ecc_on = -1;
 		}
+
+		memcpy(nfc->block_buffer[i].buf + mtd->writesize, chip->oob_poi,
+		       mtd->oobsize);
 	}
 
 	/* erase this block */
-	mtk_nfc_do_erase(mtd, chip, page_start);
+	ret = mtk_nfc_do_erase(mtd, chip, page_start);
+	if (ret) {
+		/* erase failure. print error */
+		dev_err(dev, "erase failed %d on page %u for jffs2 fixup\n",
+			ret, page);
+		return ret;
+	}
 
 	/* write back pages except the one to be rewritten */
 	for (i = 0; i < pages_per_block; i++) {
-		if (page_start + i != page) {
-			memcpy(chip->oob_poi,
-				nfc->block_buffer[i] + mtd->writesize,
-				nfc->caps->fdm_size * chip->ecc.steps);
-			mtk_nfc_do_write_page_hwecc(mtd, chip,
-				nfc->block_buffer[i], page_start + i);
+		if (page_start + i == page)
+			continue;
+
+		/* skip write page which failed on reading */
+		if (nfc->block_buffer[i].ecc_on < 0) {
+			dev_info(dev,
+				 "skipping writing page %u for jffs2 fixup\n",
+				 page);
+			continue;
+		}
+
+		memcpy(chip->oob_poi, nfc->block_buffer[i].buf + mtd->writesize,
+		       mtd->oobsize);
+		ret = mtk_nfc_do_write_page(mtd, chip, nfc->block_buffer[i].buf,
+					    page_start + i,
+					    nfc->block_buffer[i].ecc_on);
+		if (ret) {
+			dev_err(dev,
+				"write error %d on page %u for jffs2 fixup\n",
+				ret, page);
 		}
 	}
 
 	/* write page */
 	memcpy(chip->oob_poi, oob, nfc->caps->fdm_size * chip->ecc.steps);
 
-	mtk_nfc_do_write_page_hwecc(mtd, chip, nfc->pending_page, page);
+	ret = mtk_nfc_do_write_page(mtd, chip, buf, page, 1);
+	if (ret) {
+		dev_err(dev, "write error %d on page [%u] for jffs2 fixup\n",
+			ret, page);
+	}
 
-	return 0;
+	return ret;
 }
 
-static int mtk_nfc_write_page_compat_check(struct mtd_info *mtd,
+static int mtk_nfc_write_page_jffs2_fixup(struct mtd_info *mtd,
 	struct nand_chip *chip, const uint8_t *buf, int page)
 {
 	struct mtk_nfc *nfc = nand_get_controller_data(chip);
-	int i;
+	struct device *dev = nfc->dev;
+	int ret, pages_per_block;
+	bool empty_page = false;
+
+	/*
+	 * only do this for first page of a block
+	 * (i.e. the page with JFFS2 clean marker)
+	 */
+	pages_per_block = mtd->erasesize / mtd->writesize;
+	if (page % pages_per_block)
+		return 0;
 
 	/* backup pending oob data */
 	memcpy(nfc->pending_oob[0], chip->oob_poi, mtd->oobsize);
 
-	mtk_nfc_do_read_page_hwecc(mtd, chip, nfc->pending_page, page);
+	/* read target page in raw mode first to check whether it's empty */
+	ret = mtk_nfc_do_read_page(mtd, chip, nfc->pending_page, page, 0);
+	if (ret) {
+		/* read failure. reject follow-up actions */
+		dev_err(dev, "raw read error %d on page [%u] for jffs2 fixup\n",
+			ret, page);
+
+		/* restore pending oob data */
+		memcpy(chip->oob_poi, nfc->pending_oob[0], mtd->oobsize);
+		return ret;
+	}
 
-	if (mtk_nfc_check_empty_page(mtd, chip, nfc->pending_page)) {
-		/* page is empty, writing directly */
+	/* page must be checked in raw mode (with ecc parity code region) */
+	empty_page = mtk_nfc_check_empty_page_ecc(mtd, chip, nfc->pending_page);
+	if (empty_page) {
+		/* page is empty. do normal writing */
 		memcpy(chip->oob_poi, nfc->pending_oob[0], mtd->oobsize);
 		return 0;
 	}
 
-	/* backup in-flash oob data */
-	memcpy(nfc->pending_oob[1], chip->oob_poi, mtd->oobsize);
+	/* read target page in ecc mode */
+	ret = mtk_nfc_do_read_page(mtd, chip, nfc->pending_page, page, 1);
+	if (ret < 0) {
+		if (ret != -EBADMSG) {
+			/* read failure. reject follow-up actions */
+			dev_err(dev,
+				"read error %d on page [%u] for jffs2 fixup\n",
+				ret, page);
+
+			memcpy(chip->oob_poi, nfc->pending_oob[0],
+			       mtd->oobsize);
+			return ret;
+		}
 
-	/* merge page data */
-	for (i = 0; i < mtd->writesize; i++)
-		nfc->pending_page[i] &= buf[i];
+		/*
+		 * page has unrecoverable ecc error. we can choose to reject
+		 * follow-up actions here.
+		 */
+		dev_warn(dev, "doing page merging on %u with bitflips "
+			 "for jffs2 fixup\n", page);
+	}
 
-	for (i = 0; i < mtd->oobsize; i++)
-		nfc->pending_oob[1][i] &= nfc->pending_oob[0][i];
+	/* backup pending page data (buf will be touched during write) */
+	memcpy(nfc->pending_page, buf, mtd->writesize);
 
-	mtk_nfc_page_erase_write(mtd, chip, nfc->pending_page,
-		nfc->pending_oob[1], page);
+	/* backup in-flash oob data */
+	memcpy(nfc->pending_oob[1], chip->oob_poi, mtd->oobsize);
+
+	/* write page with new data and old oob */
+	ret = mtk_nfc_page_erase_write(mtd, chip, nfc->pending_page,
+				       nfc->pending_oob[1], page);
 
 	/* restore original oob */
 	memcpy(chip->oob_poi, nfc->pending_oob[0], mtd->oobsize);
 
-	return 1;
+	return !ret ? 1 : ret;
 }
 
 static int mtk_nfc_write_page(struct mtd_info *mtd, struct nand_chip *chip,
@@ -997,8 +1175,9 @@ static int mtk_nfc_write_page(struct mtd_info *mtd, struct nand_chip *chip,
 	int status;
 
 	if (likely(!raw)) {
-		if (mtk_nfc_write_page_compat_check(mtd, chip, buf, page))
-			return 0;
+		status = mtk_nfc_write_page_jffs2_fixup(mtd, chip, buf, page);
+		if (status)
+			return status > 0 ? 0 : status;
 	}
 
 	chip->cmdfunc(mtd, NAND_CMD_SEQIN, 0x00, page);
@@ -1123,8 +1302,8 @@ static int mtk_nfc_nand_chip_init(struct device *dev, struct mtk_nfc *nfc,
 		return -ENOMEM;
 
 	for (i = 0; i < npgs; i++) {
-		nfc->block_buffer[i] = devm_kzalloc(dev, len, GFP_KERNEL);
-		if (!nfc->block_buffer[i])
+		nfc->block_buffer[i].buf = devm_kzalloc(dev, len, GFP_KERNEL);
+		if (!nfc->block_buffer[i].buf)
 			return -ENOMEM;
 	}
 
diff --git a/drivers/mtd/nand/mtk_nand_mt7621.h b/drivers/mtd/nand/mtk_nand_mt7621.h
index 25c4b6a29..ffbc6ae6e 100644
--- a/drivers/mtd/nand/mtk_nand_mt7621.h
+++ b/drivers/mtd/nand/mtk_nand_mt7621.h
@@ -162,6 +162,12 @@ struct mtk_ecc {
 	u32 sectors;
 };
 
+struct mtk_nfc_page_buffer {
+	u8 ecc_on;
+	u8 unused[3];
+	u8 *buf;
+};
+
 struct mtk_nfc {
 	struct nand_hw_control controller;
 	struct mtk_ecc_config ecc_cfg;
@@ -176,7 +182,7 @@ struct mtk_nfc {
 
 	u8 *buffer;
 
-	u8 **block_buffer;
+	struct mtk_nfc_page_buffer *block_buffer;
 	u8 *pending_page;
 	u8 *pending_oob[2];
 };
-- 
2.18.0

